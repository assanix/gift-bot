import logging
import os

from aiogram import types, Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from datetime import datetime

from config import DEFAULT_SHEET_RANGE
from services.aws_s3 import upload_file_to_s3
from services.google_sheets import append_to_sheet
from states.order_states import OrderStates
from utils.file import get_extension


logger = logging.getLogger(__name__)
form_router = Router()


@form_router.message(F.content_type.in_({"photo", "document"}))
async def handle_check(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–≥—Ä—É–∑–∏–ª —á–µ–∫.")
    processing_message = await message.answer("üì• <i>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞...</i>")

    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document:
        file_id = message.document.file_id
    else:
        await message.answer("‚ùó <b>–û—à–∏–±–∫–∞:</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <u>—Ñ–æ—Ç–æ</u> –∏–ª–∏ <u>–¥–æ–∫—É–º–µ–Ω—Ç</u> —Å —á–µ–∫–æ–º.")
        return

    file_info = await message.bot.get_file(file_id)
    file_path = file_info.file_path
    file_unique_id = file_info.file_unique_id
    extension = get_extension(file_path)

    local_file_name = f"{file_unique_id}{extension}"
    local_path = os.path.join("temp", local_file_name)
    os.makedirs("temp", exist_ok=True)

    downloaded_file = await message.bot.download_file(file_info.file_path)

    with open(local_path, "wb") as f:
        f.write(downloaded_file.read())

    logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ {local_path}.")

    try:
        s3_url = await upload_file_to_s3(local_path)
        await state.update_data({"check_link": s3_url})
        logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3: {s3_url}")
    except Exception as e:
        await message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ –æ–±–ª–∞–∫–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")

    os.remove(local_path)

    await processing_message.edit_text("‚úÖ –ß–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    await message.answer("2/4 –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–≤–∞—à–µ –§–ò–û</b> üë§:")
    await state.set_state(OrderStates.waiting_for_fio)


@form_router.message(StateFilter(OrderStates.waiting_for_fio))
async def handle_fio(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –§–ò–û: {message.text.strip()}.")
    await state.update_data({"fio": message.text.strip()})
    await message.answer("üè† 3/4 –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b> üìç:")
    await state.set_state(OrderStates.waiting_for_address)


@form_router.message(StateFilter(OrderStates.waiting_for_address))
async def handle_address(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –∞–¥—Ä–µ—Å: {message.text.strip()}.")
    await state.update_data({"address": message.text.strip()})
    await message.answer("üìû 4/4 –£–∫–∞–∂–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> ‚òéÔ∏è:")
    await state.set_state(OrderStates.waiting_for_phone)


@form_router.message(StateFilter(OrderStates.waiting_for_phone))
async def handle_phone(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message.text.strip()}.")
    await state.update_data({"phone": message.text.strip()})

    data = await state.get_data()
    user_id = message.from_user.id
    fio = data.get("fio")
    address = data.get("address")
    phone = data.get("phone")
    check_link = data.get("check_link")
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    username = message.from_user.username

    values = [[str(user_id), fio, address, phone, check_link, current_time, username]]
    # save_data_to_file(values)
    logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ–±—Ä–∞–Ω—ã: {values}")
    process_append_message = await message.answer("‚úçÔ∏è <i>–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...</i>")
    await append_to_sheet(values, DEFAULT_SHEET_RANGE)
    await process_append_message.delete()

    await message.answer(
        "üéâ <b>–í—Å–µ –≥–æ—Ç–æ–≤–æ!</b>\n\n"
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
        f"üìÑ <b>–ß–µ–∫:</b> {check_link}  \n"
        f"üë§ <b>–§–ò–û:</b> {fio}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {address}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n\n"
        "üöÄ <i>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!</i> üòä\n\n"
        f"üéü <b>–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:</b> <code>{user_id}</code>\n\n",

        # reply_markup=edit_keyboard()
    )

    await state.clear()
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–æ.")
