import asyncio

from aiogram import Router, types
from aiogram.filters import Command
from database import db
from config import ADMIN_IDS
import logging

broadcast_router = Router()
logger = logging.getLogger(__name__)

BROADCAST_MESSAGE = (
    "üîä –ë“Ø–≥—ñ–Ω —Å–∞“ì–∞—Ç 20:00-–¥–µ –ê—Ä–∞–π “õ—ã–∑–¥–∞—Ä—ã“£—ã–∑ –∞–ª“ì–∞—à“õ—ã —Ç—ñ–∫–µ–ª–µ–π —ç—Ñ–∏—Ä—ñ–Ω –±–∞—Å—Ç–∞–π–¥—ã‚Äº\n\n"
    "–ë“Ø–≥—ñ–Ω–≥—ñ —ç—Ñ–∏—Ä–¥–µ 5.000.000—Ç–≥ –∞“õ—à–∞–ª–∞–π, 5 iPhone 16 —Å—ã–π–ª–∞–π—Ç—ã–Ω –±–æ–ª–∞–º—ã–∑üòç\n\n"
    "“ö“±—Ä “õ–∞–ª—ã–ø “õ–æ–π–º–∞“£—ã–∑‚Äº\n\n"
    "–≠—Ñ–∏—Ä –±–∞—Å—Ç–∞–ª—É—ã–Ω–∞ 2 —Å–∞“ì–∞—Ç “õ–∞–ª–¥—ãüôå"
)


async def broadcast_message(bot, text):
    users = await db.users.find({}).to_list(None)
    success_count, fail_count = 0, 0

    for user in users:
        chat_id = user.get("chat_id")
        if not chat_id:
            continue

        try:
            await bot.send_message(chat_id, text)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            success_count += 1
            await asyncio.sleep(0.05)
        except Exception as e:
            fail_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

    return success_count, fail_count


@broadcast_router.message(Command("broadcast"))
async def start_broadcast(message: types.Message, bot):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    await message.reply("üì§ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")
    success, fail = await broadcast_message(bot, BROADCAST_MESSAGE)
    await message.reply(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {fail}")